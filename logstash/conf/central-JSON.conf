# =======  EXPERIMENTAL  ============ 
# feed logstash from STDINPUT or from BEAT. 

input {
    # WARNING: con questo plugins logstash rimane as observer anche se lo alimenti da stdin .. 
    beats {
	    host => 'bluepill'
	    port => 5044
        codec => "json"
    }
    stdin { 
        type => "stdin-type"
        codec => "json"
    }
}

filter {
    #mutate { add_tag => [ "debug" ]  }

    if [type] == "stdin-type" {
        mutate {
          rename =>  [ "id.orig_h", "id_orig_h" ]
          rename =>  [ "id.orig_p", "id_orig_p" ]
          rename =>  [ "id.resp_h", "id_resp_h" ]
          rename =>  [ "id.resp_p", "id_resp_p" ]
       	  add_field => { "provider"  => "test" }
          add_tag => [ "debug" ]
        }
    }
    if [type] == "bro_conn" {
         mutate {
          rename =>  [ "id.orig_h", "id_orig_h" ]
          rename =>  [ "id.orig_p", "id_orig_p" ]
          rename =>  [ "id.resp_h", "id_resp_h" ]
          rename =>  [ "id.resp_p", "id_resp_p" ]
        }
       if "-" == [duration] { mutate { gsub => [ "duration", "-", "0"] } }   
       if "-" == [orig_bytes] { mutate { gsub => [ "orig_bytes", "-", "0"] } }   
       if "-" == [resp_bytes] { mutate { gsub => [ "resp_bytes", "-", "0"] } }   
    }
    if [type] == "bro_dhcp" {
         mutate {
          rename =>  [ "id.orig_h", "id_orig_h" ]
          rename =>  [ "id.orig_p", "id_orig_p" ]
          rename =>  [ "id.resp_h", "id_resp_h" ]
          rename =>  [ "id.resp_p", "id_resp_p" ]
        }
    }
    if [type] == "bro_dns" {
        mutate {
          rename =>  [ "id.orig_h", "id_orig_h" ]
          rename =>  [ "id.orig_p", "id_orig_p" ]
          rename =>  [ "id.resp_h", "id_resp_h" ]
          rename =>  [ "id.resp_p", "id_resp_p" ]
        }
       if "-" == [ttl] { mutate { gsub => [ "ttl", "-", "-99"] } }
    }
    if [type] == "bro_files" {
       if "-" == [seen_bytes] {
           mutate { gsub => [ "seen_bytes", "-", "0"] }
       }   
       if "-" == [missing_bytes] {
           mutate { gsub => [ "missing_bytes", "-", "0"] }
       }   
       if "-" == [total_bytes] {
           mutate { gsub => [ "total_bytes", "-", "0"] }
       }   
       if "-" == [duration] {
           mutate { gsub => [ "duration", "-", "0"] }
       }   
    }
    if [type] == "bro_http" {
       mutate {
          rename =>  [ "id.orig_h", "id_orig_h" ]
          rename =>  [ "id.orig_p", "id_orig_p" ]
          rename =>  [ "id.resp_h", "id_resp_h" ]
          rename =>  [ "id.resp_p", "id_resp_p" ]
        }
    }
    if [type] == "bro_ssh" {
       mutate {
          rename =>  [ "id.orig_h", "id_orig_h" ]
          rename =>  [ "id.orig_p", "id_orig_p" ]
          rename =>  [ "id.resp_h", "id_resp_h" ]
          rename =>  [ "id.resp_p", "id_resp_p" ]
        }
    }
    if [type] == "bro_ssl" {
       mutate {
          rename =>  [ "id.orig_h", "id_orig_h" ]
          rename =>  [ "id.orig_p", "id_orig_p" ]
          rename =>  [ "id.resp_h", "id_resp_h" ]
          rename =>  [ "id.resp_p", "id_resp_p" ]
        }
    }
    if [type] == "bro_x509" {
        mutate {
          #convert => [ "id.orig_p", "integer" ]
          rename =>  [ "certificate.version", "certificate_version" ]
          rename =>  [ "certificate.serial", "certificate_serial"]
          rename =>  [ "certificate.subject", "certificate_subject"]
          rename =>  [ "certificate.issuer", "certificate_issuer" ]
          rename =>  [ "certificate.not_valid_before", "certificate_not_valid_before" ]
          rename =>  [ "certificate.not_valid_after", "certificate_not_valid_after" ]
          rename =>  [ "certificate.key_alg", "certificate_key_alg" ]
          rename =>  [ "certificate.sig_alg", "certificate_sig_alg" ]
          rename =>  [ "certificate.key_type", "certificate_key_type" ]
          rename =>  [ "certificate.key_length", "certificate_key_length" ]
          rename =>  [ "certificate.exponent", "certificate_exponent" ]
          rename =>  [ "certificate.curve", "certificate_curve" ]
          rename =>  [ "san.dns", "san_dns" ]
          rename =>  [ "basic_constraints.ca", "basic_constraint_ca" ]
        }
       # clean the format
       #mutate { gsub => [ "certificate_not_valid_after", ".0", "" ] }
       #mutate { gsub => [ "certificate_not_valid_before", ".0", "" ] }
       mutate { gsub => [ "certificate_exponent", "-", "0" ] }
       mutate {
            convert => [ "certificate_not_valid_before", "integer" ]
            convert => [ "certificate_not_valid_after", "integer" ]
       }
    }
    if [type] == "pdns" {
    	grok {
        	match => { 
            		"message" => "(?<ts>(.*?))\|\|(?<dns_client>(.*?))\|\|(?<dns_server>(.*?))\|\|(?<rr_class>(.*?))\|\|(?<query>(.*?))\|\|(?<rr_type>(.*?))\|\|(?<answer>(.*?))\|\|(?<ttl>(.*?))\|\|(?<count>(.*?))"
        	}
        	remove_field => ["message"]
        	add_field => { "origin" => "33c3" }
    	}
    }      

    date {
        locale => "en"
        match => [ "ts", "UNIX" ]
    }
}

output {
   if [type] == "stdin-type" {
            elasticsearch { 
       		    hosts => ["bluepill:9200"]
                index => "test-%{+YYYY.MM.dd}"
            }
   }
   if [type] == "bro_conn" {
            elasticsearch { 
       		    manage_template => true
       		    hosts => ["bluepill:9200"]
                template => "/home/admin/bro-elk/templates/template_bro_conn.json"
                template_name => "ttbro-conn"
                index => "ttbro-conn-%{+YYYY.MM.dd}"
            }
   }
   if [type] == "bro_dhcp" {
            elasticsearch { 
       		    hosts => ["bluepill:9200"]
       		    manage_template => true
                template => "/home/admin/bro-elk/templates/template_bro_dhcp.json"
                template_name => "ttbro-dhcp"
                index => "ttbro-dhcp-%{+YYYY.MM.dd}"
            }
   }
   if [type] == "bro_dns" {
            elasticsearch { 
       		    hosts => ["bluepill:9200"]
       		    manage_template => true
                template => "/home/admin/bro-elk/templates/template_bro_dns.json"
                template_name => "ttbro-dns"
                index => "ttbro-dns-%{+YYYY.MM.dd}"
            }
   }
   if [type] == "bro_files" {
            elasticsearch { 
       		    hosts => ["bluepill:9200"]
       		    manage_template => true
                template => "/home/admin/bro-elk/templates/template_bro_files.json"
                template_name => "ttbro-files"
                index => "ttbro-files-%{+YYYY.MM.dd}"
            }
   }
   if [type] == "bro_http" {
            elasticsearch { 
       		    hosts => ["bluepill:9200"]
       		    manage_template => true
                template => "/home/admin/bro-elk/templates/template_bro_http.json"
                template_name => "ttbro-http"
                index => "ttbro-http-%{+YYYY.MM.dd}"
            }
   }
   if [type] == "bro_ssh" {
            elasticsearch { 
       		    hosts => ["bluepill:9200"]
       		    manage_template => true
                template => "/home/admin/bro-elk/templates/template_bro_ssh.json"
                template_name => "ttbro-ssh"
                index => "ttbro-ssh-%{+YYYY.MM.dd}"
            }
   }
   if [type] == "bro_ssl" {
            elasticsearch { 
       		    hosts => ["bluepill:9200"]
       		    manage_template => true
                template => "/home/admin/bro-elk/templates/template_bro_ssl.json"
                template_name => "ttbro-ssl"
                index => "ttbro-ssl-%{+YYYY.MM.dd}"
            }
   }
   if [type] == "bro_x509" {
            elasticsearch { 
       		    hosts => ["bluepill:9200"]
       		    manage_template => true
                template => "/home/admin/bro-elk/templates/template_bro_x509.json"
                template_name => "ttbro-x509"
                index => "ttbro-x509-%{+YYYY.MM.dd}"
            }
   }
   if [type] == "pdns" {
            elasticsearch { 
                    manage_template => true
                    template => "/home/admin/bro-elk/templates/extra_template_dns.json"
                    template_name => "pdns"
                    hosts => ["bluepill:9200"]
                    index => "pdns-%{+YYYY.MM.dd}"
            }
   }

   if "debug" in [tags] {
	    stdout { codec => rubydebug }
   }
}
